import nltk
from nltk import word_tokenize, pos_tag, ne_chunk
from nltk.chunk import conlltags2tree, tree2conlltags

# Descargar recursos necesarios de NLTK
nltk.download('punkt')
nltk.download('averaged_perceptron_tagger')
nltk.download('maxent_ne_chunker')
nltk.download('words')

# Función para extraer entidades nombradas usando tratamiento probabilístico
def extract_entities(text):
    words = word_tokenize(text)
    pos_tags = pos_tag(words)
    tree = ne_chunk(pos_tags)
    iob_tags = tree2conlltags(tree)
    
    entities = []
    current_entity = None

    for (word, tag, iob) in iob_tags:
        if iob == 'O':
            if current_entity:
                entities.append(' '.join(current_entity))
                current_entity = None
        else:
            if current_entity:
                current_entity.append(word)
            else:
                current_entity = [word]

    return entities

# Ejemplo de uso
texto_ejemplo = "OpenAI es una empresa de inteligencia artificial con sede en San Francisco."
entidades = extract_entities(texto_ejemplo)

print("Entidades encontradas:")
print(entidades)
